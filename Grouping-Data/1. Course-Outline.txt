Grouping data
-------------------
array
a numbered sequence of elements of a single type
does not change in size
used for Go internals; generally not recommended for your code
------------------------------
slice
built on top of an array
holds values of the same type
changes in size
has a length and a capacity
https://golang.org/ref/spec#Slice_types 
-------------
map
key / value storage
an unordered group of elements of one type, called the element type, indexed by a set of unique keys of another type, called the key type.
https://golang.org/ref/spec#Map_types 

struct
a data structure
a composite type
allows us to collect values of different types together
https://golang.org/ref/spec#Struct_types

Array
Arrays are mostly used as a building block in the Go programming language. In some instances, we might use an array, but mostly the recommendation is to use slices instead.
----------------------------------
Slice - composite literal
A SLICE holds VALUES of the same TYPE. If I wanted to store all of my favorite numbers, I would use a slice of int.
 If I wanted to store all of my favorite foods, I would use a slice of string. We will use a COMPOSITE LITERAL to create a slice. 
A composite literal is created by having the TYPE followed by CURLY BRACES and then putting the appropriate values in the curly brace area.
--------------------
Slice - for range
We can loop over the values in a slice with the range clause. We can also access items in a slice by index position.
---------------------------
Slice - slicing a slice
We can slice a slice which means that we can cut parts of the slice away. We do this with the colon operator.
--------------------------------------
Slice - append to a slice
To append values to a slice, we use the special built in function append. This function returns a slice of the same type. 
--------------------------------------
Slice - deleting from a slice
We can delete from a slice using both append and slicing. This is a wonderful and elegant example of why Go is great and how Go provides ease of programming.
------------------------
Slice - make
Slices are built on top of arrays. A slice is dynamic in that it will grow in size. The underlying array, however, does not grow in size. When we create a slice, we can use the built in function make to specify how large our slice should be and also how large the underlying array should be. This can enhance performance a little bit.
make([]T, length, capacity) 
make([]int, 50, 100) 
----------------------------
Slice - multi-dimensional slice
A multi-dimensional slice is like a spreadsheet. You can have a slice of a slice of some type. Does that sound confusing? Watch this video and it will all be clarified.
----------------------------------
Slice - underlying array
Underlying every slice is an array. A slice is actually a data structure which has three parts: 
a pointer to an array
len
cap
In this video, we will explore the relationship between the slice and the underlying array.
code
a new underlying array is allocated
the same array is used for TWO slices
looking at the LEN & CAP of a slice
---------------------------
Map - introduction
A map is a key-value store. This means that you store some value and you access that value by a key. For instance, 
I might store the value “phoneNumber” and access it be the key “friendName”. 
This way I could enter my friend’s name and have the map return their phone number. The syntax for a map is map[key]value. 
The key can be of any type which allows comparison (eg, I could use a string or an int, for example, as I can compare if two strings are equal, or if two ints are equal).
 It is important to note that maps are unordered. If you print out all of the keys and values in a map, they will print out in random order. 
The comma ok idiom is also covered in this video. A map is the perfect data structure when you need to look up data fast.
------------------------------------
Map - add element & range
Here is how we add an element to a map. I also show you how to use the range loop to print out a map’s keys and values.
---------------------
Map - delete
You delete an entry from a map using delete(<map name>, “key”). No error is thrown if you use a key which does not exist. 
To confirm you delete a key/value, verify that the key/value exists with the comma ok idiom.
-------------------





